@page "/"
@using ProjetBloc3.Business.Applicatif
@using ProjetBloc3.Repository.BlocCube.Models

@inject IUserInfoAppService userInfoAppService

<MudGrid>
    <MudItem xs="2" Class="mt-5 mb-3"> </MudItem>
    <MudItem xs="8" Class="mt-5 mb-3">
        <MudPaper Elevation="4" Class="rounded-lg">
            <MudDataGrid @ref="userInfoTable" T="UserInfo" Items="listUserInfo" Hideable="false" Groupable="false" Dense SortMode="SortMode.None">
                <ToolBarContent>
                    <MudSpacer />
                    <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Add" OnClick="CreationFormOpen">Create an Article</MudButton>
                    <MudSpacer />
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.LastName" Title="LastName" />
                    <PropertyColumn Property="x => x.FirstName" Title="FirstName" />
                    <PropertyColumn Property="x => x.Email" Title="Email" />
                    <TemplateColumn Filterable="false">
                        <CellTemplate>
                            <MudStack Row>
                                <MudButton Class="pa-1" Size="Size.Small" Color="Color.Info" StartIcon="@Icons.Material.Filled.Article" OnClick="() => DetailFormOpen(context.Item)">Edit</MudButton>
                                <MudButton Class="pa-1" Size="Size.Small" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Edit" OnClick="() => EditFormOpen(context.Item)">Edit</MudButton>
                                <MudButton Class="pa-1" Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => DeleteFormOpen(context.Item)">Delete</MudButton>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="UserInfo" />
                </PagerContent>
            </MudDataGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="2" Class="mt-5 mb-3"> </MudItem>
</MudGrid>

<MudDialog Visible="visibleDetailForm" Options="dialogOptions" OnBackdropClick="DetailFormClose" Class="rounded-lg">
    <TitleContent>
        <MudText Typo="Typo.h6">@userInfo.LastName @userInfo.FirstName</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="creationForm" ReadOnly>
            <MudTextField T="string" Class="rounded-lg" Label="LastName" @bind-Value="userInfo.LastName" Required RequiredError="Please insert a LastName" Disabled />
            <MudTextField T="string" Class="rounded-lg" Label="FirstName" @bind-Value="userInfo.FirstName" Required RequiredError="Please insert a FirstName" Disabled />
            <MudTextField T="string" Class="rounded-lg" Label="Email" @bind-Value="userInfo.Email" Required RequiredError="Please insert an Email" Disabled />
            <MudTextField T="string" Class="rounded-lg" Label="Address" @bind-Value="userInfo.Address" Required RequiredError="Please insert an Address" Disabled />
            <MudTextField T="string" Class="rounded-lg" Label="City" @bind-Value="userInfo.City" Required RequiredError="Please insert a City" Disabled />
            <MudTextField T="string" Class="rounded-lg" Label="ZipCode" @bind-Value="userInfo.ZipCode" Required RequiredError="Please insert a ZipCode" Disabled />
            <MudTextField T="string" Class="rounded-lg" Label="Country" @bind-Value="userInfo.Country" Required RequiredError="Please insert an Country" Disabled />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="DetailFormClose">Close</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog Visible="visibleCreationForm" Options="dialogOptions" OnBackdropClick="CreationFormClose" Class="rounded-lg">
    <TitleContent>
        <MudText Typo="Typo.h6">Create a User</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="creationForm">
            <MudTextField T="string" Class="rounded-lg" Label="LastName" @bind-Value="userInfo.LastName" Required RequiredError="Please insert a LastName" Variant="Variant.Outlined" />
            <MudTextField T="string" Class="rounded-lg" Label="FirstName" @bind-Value="userInfo.FirstName" Required RequiredError="Please insert a FirstName" Variant="Variant.Outlined" />
            <MudTextField T="string" Class="rounded-lg" Label="Email" @bind-Value="userInfo.Email" Required RequiredError="Please insert an Email" Variant="Variant.Outlined" />
            <MudTextField T="string" Class="rounded-lg" Label="Address" @bind-Value="userInfo.Address" Required RequiredError="Please insert an Address" Variant="Variant.Outlined" />
            <MudTextField T="string" Class="rounded-lg" Label="City" @bind-Value="userInfo.City" Required RequiredError="Please insert a City" Variant="Variant.Outlined" />
            <MudTextField T="string" Class="rounded-lg" Label="ZipCode" @bind-Value="userInfo.ZipCode" Required RequiredError="Please insert a ZipCode" Variant="Variant.Outlined" />
            <MudTextField T="string" Class="rounded-lg" Label="Country" @bind-Value="userInfo.Country" Required RequiredError="Please insert an Country" Variant="Variant.Outlined" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CreationFormClose">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Save" OnClick="CreationFormSubmit">Create</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog Visible="visibleEditForm" Options="dialogOptions" OnBackdropClick="EditFormClose" Class="rounded-lg">
    <TitleContent>
        <MudText Typo="Typo.h6">Edit User : @userInfo.LastName @userInfo.FirstName</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="editForm">
            <MudTextField T="string" Class="rounded-lg" Label="LastName" @bind-Value="userInfo.LastName" Required RequiredError="Please insert a LastName" Variant="Variant.Outlined" />
            <MudTextField T="string" Class="rounded-lg" Label="FirstName" @bind-Value="userInfo.FirstName" Required RequiredError="Please insert a FirstName" Variant="Variant.Outlined" />
            <MudTextField T="string" Class="rounded-lg" Label="Email" @bind-Value="userInfo.Email" Required RequiredError="Please insert an Email" Variant="Variant.Outlined" />
            <MudTextField T="string" Class="rounded-lg" Label="Address" @bind-Value="userInfo.Address" Required RequiredError="Please insert an Address" Variant="Variant.Outlined" />
            <MudTextField T="string" Class="rounded-lg" Label="City" @bind-Value="userInfo.City" Required RequiredError="Please insert a City" Variant="Variant.Outlined" />
            <MudTextField T="string" Class="rounded-lg" Label="ZipCode" @bind-Value="userInfo.ZipCode" Required RequiredError="Please insert a ZipCode" Variant="Variant.Outlined" />
            <MudTextField T="string" Class="rounded-lg" Label="Country" @bind-Value="userInfo.Country" Required RequiredError="Please insert an Country" Variant="Variant.Outlined" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="EditFormClose">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Save" OnClick="EditFormSubmit">Save changes</MudButton>
    </DialogActions>
</MudDialog>

<MudMessageBox @ref="mbox" Title="Warning !" CancelText="Cancel" Class="rounded-lg">
    <MessageContent>
        <MudText>You are going to <b>DELETE</b> a User</MudText>
    </MessageContent>
    <YesButton>
        <MudButton Class="ml-3" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="DeleteFormSubmit">Delete</MudButton>
    </YesButton>
</MudMessageBox>

@code{
    // Variable for DataGrid
    private MudDataGrid<UserInfo> userInfoTable = new();
    private IEnumerable<UserInfo> listUserInfo = new List<UserInfo>();

    // Variable for Form
    private DialogOptions dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
    private UserInfo userInfo = new();
    private static UserInfo userInfoOld = new();
    private MudForm? detailForm;
    private bool visibleDetailForm;
    private MudForm? creationForm;
    private bool visibleCreationForm;
    private MudForm? editForm;
    private bool visibleEditForm;
    private MudMessageBox? mbox { get; set; }

    // Initialisation
    protected override async Task OnInitializedAsync()
    {
        listUserInfo = await userInfoAppService.GetAllAsync();
    }

    // Detail Form
    private void DetailFormOpen(UserInfo userInfoDb)
    {
        userInfo = userInfoDb;
        visibleDetailForm = true;
    }
    private void DetailFormClose() => visibleDetailForm = false;

    // Creation Form
    private void CreationFormOpen()
    {
        userInfo = new();
        visibleCreationForm = true;
    }
    private void CreationFormClose() => visibleCreationForm = false;
    private async Task CreationFormSubmit()
    {
        await creationForm!.Validate();
        if (creationForm.IsValid)
        {
            try
            {
                await userInfoAppService.CreateAsync(userInfo);
                listUserInfo = listUserInfo.Append(userInfo);
            }
            catch (Exception e) { throw new("Error in Article creation : ", e); }
            visibleCreationForm = false;
        }
    }

    // Edit Form
    private void EditFormOpen(UserInfo userInfoDb)
    {
        userInfo = userInfoDb;
        visibleEditForm = true;
    }
    private async Task EditFormClose() => visibleEditForm = false;
    private async Task EditFormSubmit()
    {
        await editForm!.Validate();
        if (editForm.IsValid)
        {
            try
            {
                await userInfoAppService.UpdateAsync(userInfo);
                listUserInfo = listUserInfo.Where(x => x.Id != userInfo.Id);
                listUserInfo = listUserInfo.Append(userInfo);
            }
            catch (Exception e) { throw new("Error in Article update : ", e); }
            visibleEditForm = false;
        }
    }

    // Delete Form
    private async Task DeleteFormOpen(UserInfo userInfoDb)
    {
        userInfo = userInfoDb;
        bool? result = await mbox!.ShowAsync();
    }
    private async Task DeleteFormSubmit()
    {
        try
        {
            await userInfoAppService.DeleteAsync(userInfo);
            listUserInfo = listUserInfo.Where(x => x.Id != userInfo.Id);
        }
        catch (Exception e) { throw new("Error in Article delete : ", e); }
        visibleEditForm = false;
    }
}
