@page "/login/{ConnectAs?}"
@using ProjetBloc3.Business.Applicatif
@using ProjetBloc3.Business.Commands
@using ProjetBloc3.Data.ViewModels
@* @using ProjetBloc3.Repository.Fournitures.Service *@
@using ProjetBloc3.Core
@using ProjetBloc3.Security
@using ProjetBloc3.Security.Configuration
@using ProjetBloc3.Security.Services
@using ProjetBloc3.Repository.BlocCube3.Models
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Server
@using Microsoft.AspNetCore.Authentication;
@using ProjetBloc3.Business.Applicatif.Security;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IAuthenticationServiceApp AuthenticationService
@inject ILogger<Login> Logger
@inject IUserServiceApp UserServiceApp
@inject IRoleServiceApp RoleServiceApp

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f9;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
    }

    .form-container {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        height: 350px;
        width: 500px;
    }

    h3 {
        text-align: center;
        color: #333;
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        margin-bottom: 5px;
        color: #666;
    }

    input {
        width: 100%;
        padding: 10px;
        height: 45px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box; /* ajoute le padding et la bordure à la largeur totale */
    }

    input:focus {
        border-color: #0056b3;
        outline: none;
    }

    .btn-primary {
        width: 100%;
        padding: 10px;
        border: none;
        border-radius: 4px;
        margin-top: 3%;
        margin-bottom: 5%;
        background-color: #007bff;
        color: white;
        cursor: pointer;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .text-danger {
        color: #dc3545;
    }
</style>

<div class="">
    <div class="form-container">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <h3 style="margin-bottom:10%;">Fournitures</h3>
            <div class="form-group">
                <label>Login</label>
                <InputText @bind-Value="Model.UserName" placeholder="Login" />
                <ValidationMessage For="() => Model.UserName" />
            </div>
            <div class="form-group">
                <label>Mot de passe</label>
                <InputText style="height:50px;" @bind-Value="Model.Password" placeholder="Mdp" type="password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Se connecter</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public string? ConnectAs { get; set; }

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (ConnectAs != null)
        {
            if (HttpContext!.User.Identity!.IsAuthenticated && (HttpContext.User.HasClaim(ClaimTypes.Role, Roles.Admin) || HttpContext.User.HasClaim(ClaimTypes.Role, Roles.Impersonate)))
            {
                await Impersonate();
            }
            else errorMessage = "Vous ne pouvez pas vous connecter en tant que quelqu'un d'autre car vous n'êtes pas administrateur";
        }
    }

    private async Task Authenticate()
    {
        try
        {
            // Response<UserAccount> response = await AuthenticationService.Authenticate(Model.UserName!, Model!.Password!);
            Response<UserAccount> response = await AuthenticationService.AuthenticateWithoutAD(Model.UserName!);
            if (!response.IsSuccesful && response.Message == "Utilisateur inconnu dans l'application")
            {
                var createUserAccountCommand = new CreateUserAccountCommand()
                {
                    UserName = Model.UserName!.ToUpper(),
                    Role = await RoleServiceApp.GetUserRoleAsync()
                };

                var userRoleCreated = await this.UserServiceApp.CreateNewUserAccount(createUserAccountCommand);

                await Authenticate();
            }
            else if (!response.IsSuccesful)
            {
                errorMessage = response.Message;
                return;
            }

            var userAccount = response.Data;
            if (userAccount is null)
            {
                return;
            }

            var claims = SetUpClaims(userAccount);

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            ClaimsPrincipal principal = new ClaimsPrincipal(identity);

            await HttpContext!.SignInAsync(principal);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Logger.LogInformation(e.Message);
            throw;
        }
    }

    //Méthode pour usurper l'identé d'une personne lorsque l'on est admin
    private async Task Impersonate()
    {
        if (HttpContext!.User.Identity!.IsAuthenticated)
        {
            await HttpContext.SignOutAsync();
        }

        Response<UserAccount> response = await AuthenticationService.AuthenticateWithoutAD(ConnectAs!);
        if (!response.IsSuccesful)
        {
            errorMessage = response.Message;
            return;
        }

        var userAccount = response.Data;
        if (userAccount is null)
        {
            return;
        }

        var claims = SetUpClaims(userAccount);

        claims.Add(new Claim(ClaimTypes.Role, Roles.Impersonate));

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        await HttpContext!.SignInAsync(principal);
        NavigationManager.NavigateTo("/");
    }

    //Methode pour remplir les claims génériques
    private List<Claim> SetUpClaims(UserAccount userAccount)
    {
        var claims = new List<Claim>()
        {
            new Claim(ClaimTypes.Name, userAccount.UserName),
            new Claim(ClaimTypes.Role, userAccount.UserRole.Code),
        };

        // Ajout des accès aux modules attribués au rôle de l'utilisateur
        foreach (UserRoleModuleAccess userRoleModuleAccess in userAccount.UserRole.UserRoleModuleAccesses)
        {
            claims.Add(new Claim("HasModuleAccess", userRoleModuleAccess.Module.Name));
        }

        return claims;
    }
}
