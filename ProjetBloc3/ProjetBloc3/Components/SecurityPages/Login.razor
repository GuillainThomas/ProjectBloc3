@page "/login/{ConnectAs?}"
@using ProjetBloc3.Business.Applicatif
@using ProjetBloc3.Business.Applicatif.Security
@using ProjetBloc3.Data.ViewModels
@using ProjetBloc3.Core
@using ProjetBloc3.Security
@using ProjetBloc3.Security.Configuration
@using ProjetBloc3.Repository.BlocCube.Models
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Server
@using Microsoft.AspNetCore.Authentication;
@inject IUserAccountAppService UserAccountService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigator
@inject ILogger<Login> Logger

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f9;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
    }

    .form-container {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        height: 400px;
        width: 500px;
    }

    h3 {
        text-align: center;
        color: #333;
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        margin-bottom: 5px;
        color: #666;
    }

    input {
        width: 100%;
        padding: 10px;
        height: 45px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box; /* ajoute le padding et la bordure à la largeur totale */
    }

    input:focus {
        border-color: #0056b3;
        outline: none;
    }

    .btn-primary {
        width: 100%;
        padding: 10px;
        border: none;
        border-radius: 4px;
        margin-top: 3%;
        margin-bottom: 5%;
        background-color: #007bff;
        color: white;
        cursor: pointer;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .text-danger {
        color: #dc3545;
    }
</style>

<div class="">
    <div class="form-container">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <h3 style="margin-bottom:10%;">Dashboard</h3>
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="Model.UserName" placeholder="Login" />
                <ValidationMessage For="() => Model.UserName" />
            </div>
            <div class="form-group">
                <label>Mot de passe</label>
                <InputText style="height:50px;" @bind-Value="Model.Password" placeholder="Mdp" type="password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Se connecter</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public string? ConnectAs { get; set; }

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        try
        {
            // Check the user logins
            UserAccount? response = await UserAccountService.VerifyPasswordAsync(Model.UserName!, Model.Password!);
            if (response == null)
            {
                errorMessage = "Utilisateur inconnu ou Mot de passe incorect";
                return;
            }

            // Createthe claims
            var claims = SetUpClaims(response);

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            ClaimsPrincipal principal = new ClaimsPrincipal(identity);

            await HttpContext!.SignInAsync(principal);
            Navigator.NavigateTo("/");
        }
        catch (Exception e)
        {
            Logger.LogInformation(e.Message);
            throw;
        }
    }

    private async Task RegisterUser()
    {
        try
        {
            UserAccount user = new()
                {
                    UserName = Model.UserName,
                    Password = Model.Password
                };

            // Register the user and save his password
            user = await UserAccountService.RegisterUserAsync(user);

            // Create the claims
            var claims = SetUpClaims(user);

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            ClaimsPrincipal principal = new ClaimsPrincipal(identity);

            await HttpContext!.SignInAsync(principal);
            Navigator.NavigateTo("/");
        }
        catch (Exception e)
        {
            Logger.LogInformation(e.Message);
            throw;
        }
    }

    //Methode pour remplir les claims génériques
    private List<Claim> SetUpClaims(UserAccount userAccount)
    {
        var claims = new List<Claim>()
        {
            new Claim(ClaimTypes.Name, userAccount.UserName),
        };

        return claims;
    }
}
