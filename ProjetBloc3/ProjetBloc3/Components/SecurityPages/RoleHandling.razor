@page "/admin/roles"
@using ProjetBloc3.Business.Applicatif.Security
@using ProjetBloc3.Business.Commands
@using ProjetBloc3.Security.Configuration
@using ProjetBloc3.Repository.BlocCube3.Models
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject IRoleServiceApp RoleServiceApp
@inject IModuleServiceApp ModuleServiceApp

@attribute [Authorize(Roles = Roles.Admin + "," + Roles.Impersonate)]

<MudGrid>
    <MudItem xs="12" Class="mt-5 mb-3">
        <MudText Typo="Typo.h3">Gestion des roles :</MudText>
    </MudItem>
    <MudItem xs="12" sm="4" md="2">
        <MudDataGrid Style="min-height:50vh;" T="UserRole" Items="@listAllRole" RowClick="(row) => SelectRole(row.Item)" Dense Hover>
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Tous les roles" />
            </Columns>
        </MudDataGrid>
        <MudButton OnClick="AddRole" Class="mt-5" Variant="Variant.Filled" Color="MudBlazor.Color.Info">Ajouter</MudButton>
    </MudItem>
    <MudItem xs="12" sm="8" md="10">
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h5">@currentRole?.Name</MudText>
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudDataGrid @ref="MudModuleGrid" T="Module" @bind-SelectedItems="selectedModules" MultiSelection Items="@listModule" Dense Hover>
                    <Columns>
                        <SelectColumn ShowInFooter="false" T="Module" />
                        <PropertyColumn Property="x => x.Name" Title="Modules" />
                    </Columns>
                </MudDataGrid>
            </MudItem>
        </MudGrid>
        <MudButton OnClick="SaveRoleChanges" Class="mt-5" Variant="Variant.Filled" Color="MudBlazor.Color.Info">Enregistrer</MudButton>
    </MudItem>
</MudGrid>

<MudDialog Visible="visible" Style="min-width:80%">
    <DialogContent>
        <MudForm>
            <MudTextField Label="Code" @bind-Value="userRoleCode"></MudTextField>
            <MudTextField Label="Description" @bind-Value="userRoleName"></MudTextField>
            <MudText Color="MudBlazor.Color.Error">@addRoleErrorMessage</MudText>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="ValidateAddRole">Valider</MudButton>
        <MudSpacer />
        <MudButton Color="MudBlazor.Color.Info" OnClick="Close">Fermer</MudButton>
    </DialogActions>
</MudDialog>

@code {
    List<UserRole> listAllRole = new();
    List<UserRoleModuleAccess> listUserModuleAccess = new();
    List<Module> listModule = new();
    HashSet<Module>? selectedModules = new();

    MudDataGrid<Module> MudModuleGrid = new();

    UserRole? currentRole;

    bool visible;
    void Open() => visible = true;
    void Close() => visible = false;

    string userRoleCode = "";
    string userRoleName = "";
    string addRoleErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        listAllRole = await RoleServiceApp.GetAllRolesAsync();
        listAllRole = listAllRole.Where(x => x.Code != Roles.Admin).ToList();
        listModule = await ModuleServiceApp.GetAllModulesAsync();
        listModule = listModule.Where(x => x.Name != Modules.Global).ToList();

        if (listAllRole.Any())
        {
            this.SelectRole(listAllRole.First());
        }
    }

    private void SelectRole(UserRole role)
    {
        currentRole = role;
        selectedModules = role.UserRoleModuleAccesses.Select(x => x.Module).ToHashSet();
    }

    private async Task SaveRoleChanges()
    {
        var roleCommand = new UpdateRoleCommand
        {
            RoleId = currentRole!.Id,
            Modules = selectedModules!.ToList(),
        };

        await RoleServiceApp.UpdateRolesAsync(roleCommand);

        UserRole userRoleToRefresh = (await RoleServiceApp.GetAllRolesAsync()).Single(x => x.Id == currentRole.Id)!;
        this.SelectRole(userRoleToRefresh);
    }

    private void AddRole()
    {
        Open();
    }

    async Task ValidateAddRole()
    {
        if (string.IsNullOrWhiteSpace(userRoleCode) || string.IsNullOrWhiteSpace(userRoleName))
        {
            this.addRoleErrorMessage = "Oiioioioioooo";
            return;
        }
        if (this.listAllRole.Any(x => x.Code.ToUpper() == userRoleCode.ToUpper()))
        {
            this.addRoleErrorMessage = "IIIIIIIIIooooooooIIIIIIIIoooooooo";
            return;
        }

        // SAUVEGARDER
        var createRoleCommand = new CreateRoleCommand()
        {
            Code = userRoleCode,
            Name = userRoleName
        };

        var userRoleCreated = await this.RoleServiceApp.CreateNewRole(createRoleCommand);
        this.listAllRole.Add(userRoleCreated);
        Close();
    }
}
